// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Axios from "axios";
import * as React from "react";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as FriendForm$Friends from "./FriendForm.bs.js";
import * as FriendsList$Friends from "./FriendsList.bs.js";

(( require("./App.scss") ));

var emptyFriend = /* record */[
  /* name */"",
  /* age */"",
  /* email */"",
  /* id */undefined
];

function friend(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* age */Json_decode.field("age", Json_decode.$$int, json),
          /* email */Json_decode.field("email", Json_decode.string, json)
        ];
}

var Decode = /* module */[/* friend */friend];

var apiEndpoint = "http://10.0.0.53:5000/friends";

var component = ReasonReact.reducerComponent("ReasonApp");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (param) {
              return Curry._1(param[/* send */3], /* GetFriends */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var match = state[0];
              var tmp;
              if (typeof match === "number") {
                tmp = React.createElement("div", undefined, "Loading");
              } else if (match.tag) {
                var data = match[0];
                tmp = state[1] ? React.createElement(React.Fragment, undefined, ReasonReact.element(undefined, undefined, FriendsList$Friends.make(data, /* array */[])), ReasonReact.element(undefined, undefined, FriendForm$Friends.make(emptyFriend, (function (f) {
                                  return Curry._1(send, /* PostFriend */Block.__(1, [f]));
                                }), /* array */[]))) : React.createElement(React.Fragment, undefined, ReasonReact.element(undefined, undefined, FriendsList$Friends.make(data, /* array */[])), ReasonReact.element(undefined, undefined, FriendForm$Friends.make(emptyFriend, (function (f) {
                                  return Curry._1(send, /* PostFriend */Block.__(1, [f]));
                                }), /* array */[])));
              } else {
                tmp = React.createElement("div", undefined, "Error");
              }
              return React.createElement("main", {
                          className: "App"
                        }, tmp);
            }),
          /* initialState */(function (_state) {
              return /* tuple */[
                      /* Loading */0,
                      /* EditingNew */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (typeof action === "number") {
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* tuple */[
                            /* Loading */0,
                            /* EditingNew */0
                          ],
                          (function (param) {
                              var send = param[/* send */3];
                              Axios.get(apiEndpoint).then((function (response) {
                                        var fs = Json_decode.array(friend, response.data);
                                        return Promise.resolve(Curry._1(send, /* FriendsGot */Block.__(0, [fs])));
                                      })).catch((function (err) {
                                      return Promise.resolve(Curry._1(send, /* GotError */Block.__(4, [err])));
                                    }));
                              return /* () */0;
                            })
                        ]);
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* tuple */[
                                  /* Loaded */Block.__(1, [action[0]]),
                                  /* EditingNew */0
                                ]]);
                  case 4 : 
                      return /* Update */Block.__(0, [/* tuple */[
                                  /* Error */Block.__(0, [action[0]]),
                                  /* EditingNew */0
                                ]]);
                  default:
                    return /* NoUpdate */0;
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (_jsProps) {
        return make(/* array */[]);
      }));

export {
  emptyFriend ,
  Decode ,
  apiEndpoint ,
  component ,
  make ,
  jsComponent ,
  
}
/*  Not a pure module */
